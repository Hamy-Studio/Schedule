package it.hamy.schedule.ui

import android.content.Context
import android.graphics.Typeface
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.cardview.widget.CardView
import it.hamy.schedule.R
import it.hamy.schedule.databinding.FragmentTodayBinding
import it.hamy.schedule.model.ScheduleItem
import it.hamy.schedule.utils.Cache
import it.hamy.schedule.utils.ParseBellSchedule
import it.hamy.schedule.utils.ParseToday
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class TodayFragment : Fragment() {

    private var _binding: FragmentTodayBinding? = null
    private val binding get() = _binding!!
    private val scheduleItems = mutableListOf<ScheduleItem>()
    private var bellSchedule: it.hamy.schedule.model.BellSchedule? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentTodayBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val prefs = requireContext().getSharedPreferences("settings", 0)
        val group = prefs.getString("group", null)

        if (group == null) {
            Toast.makeText(requireContext(), "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", Toast.LENGTH_SHORT).show()
            return
        }

        binding.progressBar.visibility = View.VISIBLE

        lifecycleScope.launch {
            Log.d("BELL_SCHEDULE", "üöÄ [–§–†–ê–ì–ú–ï–ù–¢] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã: $group")

            bellSchedule = loadBellSchedule()
            Log.d("BELL_SCHEDULE", "üîî [–§–†–ê–ì–ú–ï–ù–¢] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $bellSchedule")

            if (isNetworkAvailable()) {
                loadTodaySchedule(group)
            } else {
                loadScheduleFromCache()
            }
        }
    }

    private suspend fun loadTodaySchedule(group: String) {
        withContext(Dispatchers.IO) {
            try {
                val fetchedSchedule = ParseToday.fetchTodaySchedule(group)
                withContext(Dispatchers.Main) {
                    scheduleItems.clear()
                    scheduleItems.addAll(fetchedSchedule)
                    saveScheduleToCache()
                    showSchedule()
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", Toast.LENGTH_SHORT).show()
                }
            } finally {
                withContext(Dispatchers.Main) {
                    binding.progressBar.visibility = View.GONE
                }
            }
        }
    }

    private suspend fun loadBellSchedule(): it.hamy.schedule.model.BellSchedule? {
//        val cached = Cache.loadBellSchedule(requireContext())
//        if (cached != null) {
//            Log.d("BELL_SCHEDULE", "üíæ [–ó–í–û–ù–ö–ò] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: $cached")
//            return cached
//        }

        if (!isNetworkAvailable()) {
            Log.w("BELL_SCHEDULE", "üåê [–ó–í–û–ù–ö–ò] –ù–µ—Ç —Å–µ—Ç–∏ ‚Äî –Ω–µ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å")
            return null
        }

        val fetched = ParseBellSchedule.fetchBellSchedule()
        if (fetched != null) {
            Cache.saveBellSchedule(requireContext(), fetched)
            Log.d("BELL_SCHEDULE", "‚úÖ [–ó–í–û–ù–ö–ò] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –∫–µ—à: $fetched")
        } else {
            Log.e("BELL_SCHEDULE", "‚ùå [–ó–í–û–ù–ö–ò] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
        }
        return fetched
    }

    private fun loadScheduleFromCache() {
        val cachedList = Cache.loadTodaySchedule(requireContext())
        if (cachedList != null) {
            scheduleItems.clear()
            scheduleItems.addAll(cachedList)
            showSchedule()
        } else {
            Toast.makeText(requireContext(), "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", Toast.LENGTH_SHORT).show()
        }
        binding.progressBar.visibility = View.GONE
    }

    private fun saveScheduleToCache() {
        Cache.saveTodaySchedule(requireContext(), scheduleItems)
    }

    private fun isNetworkAvailable(): Boolean {
        val cm = activity?.getSystemService(Context.CONNECTIVITY_SERVICE) as android.net.ConnectivityManager
        return cm.activeNetworkInfo?.isConnected == true
    }

    private fun showSchedule() {
        binding.progressBar.visibility = View.GONE

        if (scheduleItems.isEmpty()) {
            binding.textView.text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            binding.textView.visibility = View.VISIBLE
            return
        } else {
            binding.textView.visibility = View.GONE
        }

        val container = binding.scheduleContainer
        container.removeAllViews()

        container.addView(TextView(requireContext()).apply {
            text = getGreeting()
            textSize = 28f
            setTypeface(null, Typeface.BOLD)
            setPadding(26, 16, 26, 8)
        })

        val dateTitle = scheduleItems.firstOrNull()?.day ?: "–°–µ–≥–æ–¥–Ω—è"
        container.addView(TextView(requireContext()).apply {
            text = dateTitle
            textSize = 20f
            setTypeface(null, Typeface.BOLD)
            setPadding(26, 16, 26, 8)
        })

        var isShowingTimeToLesson = false
        val timeView = TextView(requireContext()).apply {
            text = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
            textSize = 36f
            setTypeface(null, Typeface.BOLD)
            setPadding(26, 16, 26, 12)
        }

        timeView.setOnClickListener {
            isShowingTimeToLesson = !isShowingTimeToLesson
            timeView.text = if (isShowingTimeToLesson) getTimeToNextLesson() else getCurrentTime()
            timeView.textSize = if (isShowingTimeToLesson) 22f else 36f
        }

        container.addView(timeView)

        for (lesson in scheduleItems) {
            Log.d("BELL_SCHEDULE", "üìÑ [–†–ê–°–ü–ò–°–ê–ù–ò–ï] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ä–æ–∫: '${lesson.subject}', –Ω–æ–º–µ—Ä: '${lesson.time}', –¥–µ–Ω—å: '${lesson.actualDayOfWeek}'")

            val card = LayoutInflater.from(requireContext()).inflate(R.layout.lesson_item, null) as CardView

            card.findViewById<TextView>(R.id.lessonNumber).text = lesson.time
            card.findViewById<TextView>(R.id.lessonSubject).text = lesson.subject
            card.findViewById<TextView>(R.id.lessonTeacher).text = lesson.teacher
            card.findViewById<TextView>(R.id.lessonRoom).text = if (lesson.room.isNotBlank()) "–ö–∞–±–∏–Ω–µ—Ç: ${lesson.room}" else "–î–∏—Å—Ç–∞–Ω—Ç"

            val lessonTime = getLessonTime(lesson.time, lesson.actualDayOfWeek)
            card.findViewById<TextView>(R.id.lessonTime).text = lessonTime

            Log.d("BELL_SCHEDULE", "‚è±Ô∏è [–†–ê–°–ü–ò–°–ê–ù–ò–ï] –î–ª—è —É—Ä–æ–∫–∞ '${lesson.subject}' –ø–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è: '$lessonTime'")

            val progressBar = card.findViewById<ProgressBar>(R.id.lessonProgress)
            setupProgressBar(progressBar, lessonTime)

            card.layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply { setMargins(16, 16, 16, 16) }

            container.addView(card)
        }
    }

    private fun getLessonTime(lessonNumber: String, dayOfWeek: String?): String {
        Log.d("BELL_SCHEDULE", "üîç [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –ø–∞—Ä—É –Ω–æ–º–µ—Ä '$lessonNumber' –¥–ª—è –¥–Ω—è '$dayOfWeek'")

        if (dayOfWeek == null) {
            Log.w("BELL_SCHEDULE", "‚ö†Ô∏è [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] dayOfWeek = null")
            return "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        }

        if (bellSchedule == null) {
            Log.w("BELL_SCHEDULE", "‚ö†Ô∏è [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] bellSchedule = null")
            return "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        }

        val foundTime = when (dayOfWeek) {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" -> {
                Log.d("BELL_SCHEDULE", "üìÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –≤ bellSchedule.monday: ${bellSchedule!!.monday}")
                bellSchedule!!.monday.find { it.number == lessonNumber }?.time
            }
            "–≤—Ç–æ—Ä–Ω–∏–∫" -> {
                Log.d("BELL_SCHEDULE", "üìÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –≤ bellSchedule.tuesday: ${bellSchedule!!.tuesday}")
                bellSchedule!!.tuesday.find { it.number == lessonNumber }?.time
            }
            "—Å—Ä–µ–¥–∞" -> {
                Log.d("BELL_SCHEDULE", "üìÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –≤ bellSchedule.wednesday: ${bellSchedule!!.wednesday}")
                bellSchedule!!.wednesday.find { it.number == lessonNumber }?.time
            }
            "—á–µ—Ç–≤–µ—Ä–≥" -> {
                Log.d("BELL_SCHEDULE", "üìÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –≤ bellSchedule.thursday: ${bellSchedule!!.thursday}")
                bellSchedule!!.thursday.find { it.number == lessonNumber }?.time
            }
            "–ø—è—Ç–Ω–∏—Ü–∞" -> {
                Log.d("BELL_SCHEDULE", "üìÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ò—â–µ–º –≤ bellSchedule.friday: ${bellSchedule!!.friday}")
                bellSchedule!!.friday.find { it.number == lessonNumber }?.time
            }
            "—Å—É–±–±–æ—Ç–∞" -> ""
            else -> {
                Log.w("BELL_SCHEDULE", "‚ùì [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å: $dayOfWeek")
                null
            }
        }

        if (foundTime != null) {
            Log.d("BELL_SCHEDULE", "‚úÖ [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: '$foundTime'")
            return foundTime
        } else {
            Log.w("BELL_SCHEDULE", "‚ùå [–ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò] –í—Ä–µ–º—è –ù–ï –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–∞—Ä—ã '$lessonNumber' –≤ –¥–µ–Ω—å '$dayOfWeek'")
            return "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        }
    }

    private fun setupProgressBar(progressBar: ProgressBar, lessonTime: String) {
        if (lessonTime == "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ" || !lessonTime.contains("‚Äì")) {
            progressBar.visibility = View.GONE
            return
        }

        val parts = lessonTime.split(" ‚Äì ")
        if (parts.size != 2) {
            progressBar.visibility = View.GONE
            return
        }

        val now = Calendar.getInstance()
        val start = parseTime(parts[0]).apply {
            set(Calendar.YEAR, now.get(Calendar.YEAR))
            set(Calendar.MONTH, now.get(Calendar.MONTH))
            set(Calendar.DAY_OF_MONTH, now.get(Calendar.DAY_OF_MONTH))
        }
        val end = parseTime(parts[1]).apply {
            set(Calendar.YEAR, now.get(Calendar.YEAR))
            set(Calendar.MONTH, now.get(Calendar.MONTH))
            set(Calendar.DAY_OF_MONTH, now.get(Calendar.DAY_OF_MONTH))
        }

        if (now.after(start) && now.before(end)) {
            val total = end.timeInMillis - start.timeInMillis
            val elapsed = now.timeInMillis - start.timeInMillis
            val progress = (elapsed * 100 / total).toInt()

            progressBar.apply {
                visibility = View.VISIBLE
                max = 100
                this.progress = progress
            }
        } else {
            progressBar.visibility = View.GONE
        }
    }

    private fun parseTime(timeStr: String): Calendar {
        val cal = Calendar.getInstance()
        val sdf = SimpleDateFormat("HH:mm", Locale.getDefault())
        cal.time = sdf.parse(timeStr) ?: Date()
        return cal
    }

    private fun getGreeting(): String {
        return when (Calendar.getInstance().get(Calendar.HOUR_OF_DAY)) {
            in 5..11 -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‚ò∫Ô∏è"
            in 12..17 -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å ü§™"
            in 18..21 -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üôÇ"
            else -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏ üò¥"
        }
    }

    private fun getCurrentTime(): String = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())

    fun getTimeToNextLesson(): String {
        val now = Calendar.getInstance()
        val targetDay = scheduleItems.firstOrNull()?.actualDayOfWeek ?: return "–î–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        val schedule = when (targetDay) {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" -> bellSchedule?.monday
            "–≤—Ç–æ—Ä–Ω–∏–∫" -> bellSchedule?.tuesday
            "—Å—Ä–µ–¥–∞" -> bellSchedule?.wednesday
            "—á–µ—Ç–≤–µ—Ä–≥" -> bellSchedule?.thursday
            "–ø—è—Ç–Ω–∏—Ü–∞" -> bellSchedule?.friday
            "—Å—É–±–±–æ—Ç–∞" -> return "–í—ã—Ö–æ–¥–Ω–æ–π"
            else -> null
        } ?: return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        for (lesson in schedule) {
            val parts = lesson.time.split(" ‚Äì ")
            if (parts.size != 2) continue

            val start = parseTime(parts[0]).apply {
                set(Calendar.YEAR, now.get(Calendar.YEAR))
                set(Calendar.MONTH, now.get(Calendar.MONTH))
                set(Calendar.DAY_OF_MONTH, now.get(Calendar.DAY_OF_MONTH))
            }
            val end = parseTime(parts[1]).apply {
                set(Calendar.YEAR, now.get(Calendar.YEAR))
                set(Calendar.MONTH, now.get(Calendar.MONTH))
                set(Calendar.DAY_OF_MONTH, now.get(Calendar.DAY_OF_MONTH))
            }

            if (now.before(start)) {
                val mins = (start.timeInMillis - now.timeInMillis) / 60000
                return "–î–æ –ø–∞—Ä—ã: $mins –º–∏–Ω"
            }
            if (now.after(start) && now.before(end)) {
                val mins = (end.timeInMillis - now.timeInMillis) / 60000
                return "–î–æ –∫–æ–Ω—Ü–∞: $mins –º–∏–Ω"
            }
        }
        return "–ü–∞—Ä –±–æ–ª—å—à–µ –Ω–µ—Ç"
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}