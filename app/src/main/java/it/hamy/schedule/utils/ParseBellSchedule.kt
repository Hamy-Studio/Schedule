package it.hamy.schedule.utils

import android.util.Log
import it.hamy.schedule.model.BellSchedule
import it.hamy.schedule.model.LessonTime
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject

object ParseBellSchedule {

    private const val TAG = "BELL_SCHEDULE"
    private const val API_URL = "https://schedule-admin-ten.vercel.app/api/schedule"
    private val client = OkHttpClient()

    suspend fun fetchBellSchedule(): BellSchedule? = withContext(Dispatchers.IO) {
        return@withContext try {
            Log.d(TAG, "üåê [1/5] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: $API_URL")

            val request = Request.Builder().url(API_URL).build()
            val response = client.newCall(request).execute()

            Log.d(TAG, "üì° [2/5] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code}")
            Log.d(TAG, "üßæ [3/5] Content-Type: ${response.header("Content-Type")}")

            val body = response.body?.string()
            if (body == null) {
                Log.e(TAG, "‚ùå [4/5] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ null")
                return@withContext null
            }

            Log.d(TAG, "üìÑ [4/5] –°—ã—Ä–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${body.take(200)}")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ
            if (body.contains("<html") || body.contains("<!DOCTYPE")) {
                Log.e(TAG, "üî• [–ê–õ–ê–†–ú] –≠—Ç–æ HTML, –∞ –Ω–µ JSON! –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: $body")
                return@withContext null
            }

            val jsonObject = JSONObject(body)

            Log.d(TAG, "‚úÖ [5/5] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω. –ö–ª—é—á–∏: ${jsonObject.keys().asSequence().toList()}")

            val monday = parseDay(jsonObject.optJSONArray("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            val tuesday = parseDay(jsonObject.optJSONArray("–≤—Ç–æ—Ä–Ω–∏–∫"), "–≤—Ç–æ—Ä–Ω–∏–∫")
            val wednesday = parseDay(jsonObject.optJSONArray("—Å—Ä–µ–¥–∞"), "—Å—Ä–µ–¥–∞")
            val thursday = parseDay(jsonObject.optJSONArray("—á–µ—Ç–≤–µ—Ä–≥"), "—á–µ—Ç–≤–µ—Ä–≥")
            val friday = parseDay(jsonObject.optJSONArray("–ø—è—Ç–Ω–∏—Ü–∞"), "–ø—è—Ç–Ω–∏—Ü–∞")
            val saturday = parseDay(jsonObject.optJSONArray("—Å—É–±–±–æ—Ç–∞"), "—Å—É–±–±–æ—Ç–∞")

            val result = BellSchedule(
                monday = monday,
                tuesday = tuesday,
                wednesday = wednesday,
                thursday = thursday,
                friday = friday,
                saturday = saturday
            )

            Log.d(TAG, "üéâ [–ì–û–¢–û–í–û] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: $result")
            result

        } catch (e: Exception) {
            Log.e(TAG, "üí• [–û–®–ò–ë–ö–ê] ${e.message}", e)
            null
        }
    }

    private fun parseDay(array: org.json.JSONArray?, dayName: String): List<LessonTime> {
        if (array == null) {
            Log.w(TAG, "‚ö†Ô∏è $dayName: –º–∞—Å—Å–∏–≤ null –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return emptyList()
        }

        val list = mutableListOf<LessonTime>()
        for (i in 0 until array.length()) {
            try {
                val obj = array.getJSONObject(i)
                val lesson = LessonTime(obj.getString("number"), obj.getString("time"))
                list.add(lesson)
                Log.d(TAG, "‚ûï $dayName: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ ${lesson.number} = ${lesson.time}")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ $i –≤ $dayName", e)
            }
        }
        return list
    }
}